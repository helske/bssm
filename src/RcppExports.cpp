// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gaussian_loglik
double gaussian_loglik(const Rcpp::List& model_, const int model_type);
RcppExport SEXP _bssm_gaussian_loglik(SEXP model_SEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< const int >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_loglik(model_, model_type));
    return rcpp_result_gen;
END_RCPP
}
// general_gaussian_loglik
double general_gaussian_loglik(const arma::mat& y, SEXP Z, SEXP H, SEXP T, SEXP R, SEXP a1, SEXP P1, const arma::vec& theta, SEXP D, SEXP C, SEXP log_prior_pdf, const arma::vec& known_params, const arma::mat& known_tv_params, const arma::uvec& time_varying, const unsigned int n_states, const unsigned int n_etas);
RcppExport SEXP _bssm_general_gaussian_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP thetaSEXP, SEXP DSEXP, SEXP CSEXP, SEXP log_prior_pdfSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP, SEXP time_varyingSEXP, SEXP n_statesSEXP, SEXP n_etasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    Rcpp::traits::input_parameter< SEXP >::type T(TSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R(RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D(DSEXP);
    Rcpp::traits::input_parameter< SEXP >::type C(CSEXP);
    Rcpp::traits::input_parameter< SEXP >::type log_prior_pdf(log_prior_pdfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type time_varying(time_varyingSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_etas(n_etasSEXP);
    rcpp_result_gen = Rcpp::wrap(general_gaussian_loglik(y, Z, H, T, R, a1, P1, theta, D, C, log_prior_pdf, known_params, known_tv_params, time_varying, n_states, n_etas));
    return rcpp_result_gen;
END_RCPP
}
// nongaussian_loglik
double nongaussian_loglik(const Rcpp::List& model_, const unsigned int nsim_states, const unsigned int simulation_method, const unsigned int seed, const unsigned int max_iter, const double conv_tol, const int model_type);
RcppExport SEXP _bssm_nongaussian_loglik(SEXP model_SEXP, SEXP nsim_statesSEXP, SEXP simulation_methodSEXP, SEXP seedSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP, SEXP model_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type simulation_method(simulation_methodSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const int >::type model_type(model_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(nongaussian_loglik(model_, nsim_states, simulation_method, seed, max_iter, conv_tol, model_type));
    return rcpp_result_gen;
END_RCPP
}
// nonlinear_loglik
double nonlinear_loglik(const arma::mat& y, SEXP Z, SEXP H, SEXP T, SEXP R, SEXP Zg, SEXP Tg, SEXP a1, SEXP P1, const arma::vec& theta, SEXP log_prior_pdf, const arma::vec& known_params, const arma::mat& known_tv_params, const unsigned int n_states, const unsigned int n_etas, const arma::uvec& time_varying, const unsigned int nsim_states, const unsigned int seed, const unsigned int max_iter, const double conv_tol, const unsigned int iekf_iter, const unsigned int method);
RcppExport SEXP _bssm_nonlinear_loglik(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP ZgSEXP, SEXP TgSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP thetaSEXP, SEXP log_prior_pdfSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP, SEXP n_statesSEXP, SEXP n_etasSEXP, SEXP time_varyingSEXP, SEXP nsim_statesSEXP, SEXP seedSEXP, SEXP max_iterSEXP, SEXP conv_tolSEXP, SEXP iekf_iterSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    Rcpp::traits::input_parameter< SEXP >::type T(TSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R(RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Zg(ZgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Tg(TgSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type log_prior_pdf(log_prior_pdfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_etas(n_etasSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type time_varying(time_varyingSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type conv_tol(conv_tolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type iekf_iter(iekf_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(nonlinear_loglik(y, Z, H, T, R, Zg, Tg, a1, P1, theta, log_prior_pdf, known_params, known_tv_params, n_states, n_etas, time_varying, nsim_states, seed, max_iter, conv_tol, iekf_iter, method));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_mcmc
Rcpp::List gaussian_mcmc(const Rcpp::List& model_, const unsigned int type, const unsigned int n_iter, const unsigned int n_burnin, const unsigned int n_thin, const double gamma, const double target_acceptance, const arma::mat S, const unsigned int seed, const bool end_ram, const unsigned int n_threads, const int model_type, const arma::uvec& Z_ind, const arma::uvec& H_ind, const arma::uvec& T_ind, const arma::uvec& R_ind);
RcppExport SEXP _bssm_gaussian_mcmc(SEXP model_SEXP, SEXP typeSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP n_threadsSEXP, SEXP model_typeSEXP, SEXP Z_indSEXP, SEXP H_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type H_ind(H_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type R_ind(R_indSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_mcmc(model_, type, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, seed, end_ram, n_threads, model_type, Z_ind, H_ind, T_ind, R_ind));
    return rcpp_result_gen;
END_RCPP
}
// general_gaussian_mcmc
Rcpp::List general_gaussian_mcmc(const arma::mat& y, SEXP Z, SEXP H, SEXP T, SEXP R, SEXP a1, SEXP P1, const arma::vec& theta, SEXP D, SEXP C, SEXP log_prior_pdf, const arma::vec& known_params, const arma::mat& known_tv_params, const arma::uvec& time_varying, const unsigned int n_states, const unsigned int n_etas, const unsigned int seed, const unsigned int n_iter, const unsigned int n_burnin, const unsigned int n_thin, const double gamma, const double target_acceptance, const arma::mat S, const bool end_ram, const unsigned int n_threads, const unsigned int type);
RcppExport SEXP _bssm_general_gaussian_mcmc(SEXP ySEXP, SEXP ZSEXP, SEXP HSEXP, SEXP TSEXP, SEXP RSEXP, SEXP a1SEXP, SEXP P1SEXP, SEXP thetaSEXP, SEXP DSEXP, SEXP CSEXP, SEXP log_prior_pdfSEXP, SEXP known_paramsSEXP, SEXP known_tv_paramsSEXP, SEXP time_varyingSEXP, SEXP n_statesSEXP, SEXP n_etasSEXP, SEXP seedSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP end_ramSEXP, SEXP n_threadsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< SEXP >::type H(HSEXP);
    Rcpp::traits::input_parameter< SEXP >::type T(TSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R(RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type D(DSEXP);
    Rcpp::traits::input_parameter< SEXP >::type C(CSEXP);
    Rcpp::traits::input_parameter< SEXP >::type log_prior_pdf(log_prior_pdfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type known_params(known_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type known_tv_params(known_tv_paramsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type time_varying(time_varyingSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_etas(n_etasSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(general_gaussian_mcmc(y, Z, H, T, R, a1, P1, theta, D, C, log_prior_pdf, known_params, known_tv_params, time_varying, n_states, n_etas, seed, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, end_ram, n_threads, type));
    return rcpp_result_gen;
END_RCPP
}
// nongaussian_pm_mcmc
Rcpp::List nongaussian_pm_mcmc(const Rcpp::List& model_, const unsigned int type, const unsigned int nsim_states, const unsigned int n_iter, const unsigned int n_burnin, const unsigned int n_thin, const double gamma, const double target_acceptance, const arma::mat S, const unsigned int seed, const bool end_ram, const unsigned int n_threads, const unsigned int simulation_method, const int model_type, const arma::uvec& Z_ind, const arma::uvec& T_ind, const arma::uvec& R_ind);
RcppExport SEXP _bssm_nongaussian_pm_mcmc(SEXP model_SEXP, SEXP typeSEXP, SEXP nsim_statesSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP n_threadsSEXP, SEXP simulation_methodSEXP, SEXP model_typeSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type simulation_method(simulation_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type R_ind(R_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nongaussian_pm_mcmc(model_, type, nsim_states, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, seed, end_ram, n_threads, simulation_method, model_type, Z_ind, T_ind, R_ind));
    return rcpp_result_gen;
END_RCPP
}
// nongaussian_da_mcmc
Rcpp::List nongaussian_da_mcmc(const Rcpp::List& model_, const unsigned int type, const unsigned int nsim_states, const unsigned int n_iter, const unsigned int n_burnin, const unsigned int n_thin, const double gamma, const double target_acceptance, const arma::mat S, const unsigned int seed, const bool end_ram, const unsigned int n_threads, const unsigned int simulation_method, const int model_type, const arma::uvec& Z_ind, const arma::uvec& T_ind, const arma::uvec& R_ind);
RcppExport SEXP _bssm_nongaussian_da_mcmc(SEXP model_SEXP, SEXP typeSEXP, SEXP nsim_statesSEXP, SEXP n_iterSEXP, SEXP n_burninSEXP, SEXP n_thinSEXP, SEXP gammaSEXP, SEXP target_acceptanceSEXP, SEXP SSEXP, SEXP seedSEXP, SEXP end_ramSEXP, SEXP n_threadsSEXP, SEXP simulation_methodSEXP, SEXP model_typeSEXP, SEXP Z_indSEXP, SEXP T_indSEXP, SEXP R_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type model_(model_SEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nsim_states(nsim_statesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_thin(n_thinSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type target_acceptance(target_acceptanceSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool >::type end_ram(end_ramSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type simulation_method(simulation_methodSEXP);
    Rcpp::traits::input_parameter< const int >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type Z_ind(Z_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type T_ind(T_indSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type R_ind(R_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nongaussian_da_mcmc(model_, type, nsim_states, n_iter, n_burnin, n_thin, gamma, target_acceptance, S, seed, end_ram, n_threads, simulation_method, model_type, Z_ind, T_ind, R_ind));
    return rcpp_result_gen;
END_RCPP
}
// conditional_cov
void conditional_cov(arma::cube& Vt, arma::cube& Ct, const bool use_svd);
RcppExport SEXP _bssm_conditional_cov(SEXP VtSEXP, SEXP CtSEXP, SEXP use_svdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type Vt(VtSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Ct(CtSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_svd(use_svdSEXP);
    conditional_cov(Vt, Ct, use_svd);
    return R_NilValue;
END_RCPP
}
// dmvnorm
double dmvnorm(const arma::vec& x, const arma::vec& mean, const arma::mat& sigma, bool lwr, bool logd);
RcppExport SEXP _bssm_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP lwrSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type lwr(lwrSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm(x, mean, sigma, lwr, logd));
    return rcpp_result_gen;
END_RCPP
}
// precompute_dmvnorm
double precompute_dmvnorm(const arma::mat& sigma, arma::mat& Linv, const arma::uvec& nonzero);
RcppExport SEXP _bssm_precompute_dmvnorm(SEXP sigmaSEXP, SEXP LinvSEXP, SEXP nonzeroSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nonzero(nonzeroSEXP);
    rcpp_result_gen = Rcpp::wrap(precompute_dmvnorm(sigma, Linv, nonzero));
    return rcpp_result_gen;
END_RCPP
}
// fast_dmvnorm
double fast_dmvnorm(const arma::vec& x, const arma::vec& mean, const arma::mat& Linv, const arma::uvec& nonzero, const double constant);
RcppExport SEXP _bssm_fast_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP LinvSEXP, SEXP nonzeroSEXP, SEXP constantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Linv(LinvSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type nonzero(nonzeroSEXP);
    Rcpp::traits::input_parameter< const double >::type constant(constantSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_dmvnorm(x, mean, Linv, nonzero, constant));
    return rcpp_result_gen;
END_RCPP
}
// psd_chol
arma::mat psd_chol(const arma::mat& x);
RcppExport SEXP _bssm_psd_chol(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(psd_chol(x));
    return rcpp_result_gen;
END_RCPP
}
// stratified_sample
arma::uvec stratified_sample(arma::vec& p, const arma::vec& r, const unsigned int N);
RcppExport SEXP _bssm_stratified_sample(SEXP pSEXP, SEXP rSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(stratified_sample(p, r, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bssm_gaussian_loglik", (DL_FUNC) &_bssm_gaussian_loglik, 2},
    {"_bssm_general_gaussian_loglik", (DL_FUNC) &_bssm_general_gaussian_loglik, 16},
    {"_bssm_nongaussian_loglik", (DL_FUNC) &_bssm_nongaussian_loglik, 7},
    {"_bssm_nonlinear_loglik", (DL_FUNC) &_bssm_nonlinear_loglik, 22},
    {"_bssm_gaussian_mcmc", (DL_FUNC) &_bssm_gaussian_mcmc, 16},
    {"_bssm_general_gaussian_mcmc", (DL_FUNC) &_bssm_general_gaussian_mcmc, 26},
    {"_bssm_nongaussian_pm_mcmc", (DL_FUNC) &_bssm_nongaussian_pm_mcmc, 17},
    {"_bssm_nongaussian_da_mcmc", (DL_FUNC) &_bssm_nongaussian_da_mcmc, 17},
    {"_bssm_conditional_cov", (DL_FUNC) &_bssm_conditional_cov, 3},
    {"_bssm_dmvnorm", (DL_FUNC) &_bssm_dmvnorm, 5},
    {"_bssm_precompute_dmvnorm", (DL_FUNC) &_bssm_precompute_dmvnorm, 3},
    {"_bssm_fast_dmvnorm", (DL_FUNC) &_bssm_fast_dmvnorm, 5},
    {"_bssm_psd_chol", (DL_FUNC) &_bssm_psd_chol, 1},
    {"_bssm_stratified_sample", (DL_FUNC) &_bssm_stratified_sample, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bssm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
